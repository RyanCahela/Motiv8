{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Desktop/CAPSTONE/motiv8-main-app/motiv8/src/contexts/QuoteContextManager.js\";\nimport React from 'react';\nimport QuoteDisplay from '../components/QuoteDisplay';\nimport QuoteControls from '../components/QuoteControls';\nimport fontPairings from '../fonts/fontPairings';\nimport quotes from '../quotes/quotes';\nimport IteratorServices from '../services/IteratorServices';\nconst QuoteContext = React.createContext();\n\nclass QuoteContextManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [...quotes],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    };\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleCheckboxCheck = this.handleCheckboxCheck.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBackgroundImages(30).then();\n    this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n    this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n  }\n\n  handleRandomize() {\n    if (!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n\n    if (!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n\n    if (!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n\n  handleUndo() {\n    if (!this.state.keepBackground) {\n      this.setState(currentState => {\n        return {\n          backgroundImageUrl: currentState.previousBackgroundImageUrl,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        };\n      });\n    }\n\n    if (!this.state.keepFonts) {\n      this.setState(currentState => {\n        return {\n          fontPair: currentState.previousFontPair,\n          previousFontPair: currentState.fontPair\n        };\n      });\n    }\n\n    if (!this.state.keepQuote) {\n      this.setState(currentState => {\n        return {\n          currentQuote: currentState.previousQuote,\n          previousQuote: currentState.currentQuote\n        };\n      });\n    }\n  }\n\n  handleSaveQuote() {//TODO sends current quote config to favorites db table.\n  }\n\n  handleCheckboxCheck(e) {\n    switch (e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState(currentState => {\n          return {\n            keepQuote: !currentState.keepQuote\n          };\n        });\n        break;\n\n      case 'keep-fonts-checkbox':\n        this.setState(currentState => {\n          return {\n            keepFonts: !currentState.keepFonts\n          };\n        });\n        break;\n\n      case 'keep-background-checkbox':\n        this.setState(currentState => {\n          return {\n            keepBackground: !currentState.keepBackground\n          };\n        });\n        break;\n\n      default:\n        console.log('Something went wrong with the switch');\n    }\n  } //HELPER FUNCTIONS\n\n\n  getBackgroundImages(numberOfImages) {\n    if (numberOfImages > 30) {\n      numberOfImages = 30;\n    }\n\n    fetch(\"https://api.unsplash.com/photos/random?count=\".concat(numberOfImages), {\n      headers: {\n        Authorization: \"Client-ID \".concat(process.env.REACT_APP_API_KEY)\n      }\n    }).then(res => res.json()).then(resJson => {\n      this.setState({\n        backgroundImageUrls: resJson\n      }, //runs after setState\n      () => {\n        this.backgroundUrlItObj = IteratorServices.createIterator(this.state.backgroundImageUrls);\n        this.handleRandomize();\n      });\n    });\n  }\n\n  iterateBackgroundUrl({\n    value,\n    done\n  }) {\n    if (!done) {\n      this.setState(currentState => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        };\n      });\n    } //create new iterator when old one runs out\n    else {\n        this.getBackgroundImages(30);\n      }\n  }\n\n  iterateFontPairing({\n    value,\n    done\n  }) {\n    if (!done) {\n      this.setState(currentState => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair\n        };\n      });\n    } else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n\n  iterateQuote({\n    value,\n    done\n  }) {\n    if (!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        };\n      });\n    } else {\n      this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n\n  render() {\n    const quoteContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        handleRandomize: this.handleRandomize,\n        handleUndo: this.handleUndo,\n        handleSaveQuote: this.handleSaveQuote\n      }\n    };\n    return React.createElement(QuoteContext.Provider, {\n      value: quoteContext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nexport { QuoteContext, QuoteContextManager };","map":{"version":3,"sources":["/Users/dev/Desktop/CAPSTONE/motiv8-main-app/motiv8/src/contexts/QuoteContextManager.js"],"names":["React","QuoteDisplay","QuoteControls","fontPairings","quotes","IteratorServices","QuoteContext","createContext","QuoteContextManager","Component","constructor","props","state","currentQuote","backgroundImageUrls","backgroundImageUrl","fontPair","previousBackgroundImageUrl","previousFontPair","keepBackground","keepFonts","keepQuote","handleRandomize","bind","handleUndo","handleCheckboxCheck","componentDidMount","getBackgroundImages","then","fontPairItObj","createIterator","quoteItObj","iterateBackgroundUrl","backgroundUrlItObj","next","iterateFontPairing","iterateQuote","setState","currentState","previousQuote","handleSaveQuote","e","target","id","console","log","numberOfImages","fetch","headers","Authorization","process","env","REACT_APP_API_KEY","res","json","resJson","value","done","urls","regular","render","quoteContext","methods","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport QuoteDisplay from '../components/QuoteDisplay';\nimport QuoteControls from '../components/QuoteControls';\nimport fontPairings from '../fonts/fontPairings';\nimport quotes from '../quotes/quotes';\nimport IteratorServices from '../services/IteratorServices';\n\nconst QuoteContext = React.createContext();\n\nclass QuoteContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [...quotes],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false,\n    }\n\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleCheckboxCheck = this.handleCheckboxCheck.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.getBackgroundImages(30)\n      .then()\n    this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n    this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n  }\n  \n  handleRandomize() {\n    if(!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n  \n  handleUndo() {\n    if(!this.state.keepBackground) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: currentState.previousBackgroundImageUrl,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n\n    if(!this.state.keepFonts) {\n      this.setState((currentState) => {\n        return {\n          fontPair: currentState.previousFontPair,\n          previousFontPair: currentState.fontPair\n        }\n      })\n    }\n\n    if(!this.state.keepQuote) {\n      this.setState((currentState) => {\n        return {\n          currentQuote: currentState.previousQuote,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  handleSaveQuote() {\n    //TODO sends current quote config to favorites db table.\n  }\n\n  handleCheckboxCheck(e) {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n        console.log('Something went wrong with the switch');\n    }\n  }\n  \n  //HELPER FUNCTIONS\n  getBackgroundImages(numberOfImages) {\n    if(numberOfImages > 30) {\n      numberOfImages = 30;\n    }\n    fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      this.setState({\n        backgroundImageUrls: resJson,\n      },\n      //runs after setState\n      () => {\n        this.backgroundUrlItObj = IteratorServices.createIterator(this.state.backgroundImageUrls)\n        this.handleRandomize();\n      })\n    });\n  }\n  \n  iterateBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  iterateFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  iterateQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n\n  render() {\n\n    const quoteContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        handleRandomize: this.handleRandomize,\n        handleUndo: this.handleUndo,\n        handleSaveQuote: this.handleSaveQuote\n      }\n    }\n\n        \n    return (\n      <QuoteContext.Provider value={quoteContext}>\n        {this.props.children}\n      </QuoteContext.Provider>\n    );\n  }\n}\nexport { QuoteContext , QuoteContextManager };\n"]},"metadata":{},"sourceType":"module"}