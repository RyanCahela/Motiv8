{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Desktop/CAPSTONE/motiv8/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport Nav from './components/Nav';\nimport Quote from './components/Quote';\nimport QuoteDisplay from './components/QuoteDisplay';\nimport QuoteControls from './components/QuoteControls';\nimport fontPairings from './fonts/fontPairings';\nimport quotes from './quotes/quotes';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [...quotes],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    };\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBackgroundImages(30);\n    this.createFontPairIterator();\n    this.createQuoteIterator();\n  } //creates a bg image iterator\n\n\n  getBackgroundImages(numberOfImages) {\n    if (numberOfImages > 30) {\n      numberOfImages = 30;\n    }\n\n    fetch(\"https://api.unsplash.com/photos/random?count=\".concat(numberOfImages), {\n      headers: {\n        Authorization: 'Client-ID 637ad8107185907a6e559449be25e4c6fb9429f66f500149003592bbf8bf49ce'\n      }\n    }).then(res => res.json()).then(resJson => {\n      this.setState({\n        backgroundImageUrls: resJson\n      }, //runs after setState\n      () => {\n        this.backgroundUrlItObj = this.createIteratorObj(this.state.backgroundImageUrls);\n        this.handleRandomize();\n      });\n    });\n  } //create a fontPair Iterator\n\n\n  createFontPairIterator() {\n    this.fontPairItObj = this.createIteratorObj(this.state.fontPairings);\n  }\n\n  createQuoteIterator() {\n    this.quoteItObj = this.createIteratorObj(this.state.quotes);\n  }\n\n  *createIteratorObj(arr) {\n    for (let obj of arr) {\n      yield obj;\n    }\n  }\n\n  setBackgroundUrl({\n    value,\n    done\n  }) {\n    if (!done) {\n      this.setState(currentState => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        };\n      });\n    } //create new iterator when old one runs out\n    else {\n        this.getBackgroundImages(30);\n      }\n  }\n\n  setFontPairing({\n    value,\n    done\n  }) {\n    if (value) {\n      console.log(value);\n      this.setState(currentState => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair\n        };\n      });\n    } else {\n      //if iterator done create new iterator then call the first value on it.\n      this.createFontPairIterator();\n      this.setFontPairing(this.fontPairItObj.next());\n    }\n  }\n\n  setQuote({\n    value,\n    done\n  }) {\n    console.log(value);\n\n    if (value) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        };\n      });\n    }\n  }\n\n  handleRandomize() {\n    this.setBackgroundUrl(this.backgroundUrlItObj.next());\n    this.setFontPairing(this.fontPairItObj.next());\n    this.setQuote(this.quoteItObj.next());\n  }\n\n  handleUndo() {\n    this.setState(currentState => {\n      return {\n        backgroundImageUrl: currentState.previousBackgroundImageUrl,\n        fontPair: currentState.previousFontPair\n      };\n    });\n  }\n\n  render() {\n    //create components to pass down\n    const quoteDisplay = React.createElement(QuoteDisplay, {\n      backgroundImageUrl: this.state.backgroundImageUrl,\n      fontPair: this.state.fontPair,\n      quote: this.state.currentQuote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    });\n    const quoteControls = React.createElement(QuoteControls, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    });\n    return React.createElement(React.Fragment, null, React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Quote, {\n      quoteDisplay: quoteDisplay,\n      quoteControls: quoteControls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Nav, {\n      handleRandomize: this.handleRandomize,\n      handleUndo: this.handleUndo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dev/Desktop/CAPSTONE/motiv8/src/App.js"],"names":["React","Menu","Nav","Quote","QuoteDisplay","QuoteControls","fontPairings","quotes","App","Component","constructor","props","state","currentQuote","backgroundImageUrls","backgroundImageUrl","fontPair","previousBackgroundImageUrl","previousFontPair","keepBackground","keepFonts","keepQuote","handleRandomize","bind","handleUndo","componentDidMount","getBackgroundImages","createFontPairIterator","createQuoteIterator","numberOfImages","fetch","headers","Authorization","then","res","json","resJson","setState","backgroundUrlItObj","createIteratorObj","fontPairItObj","quoteItObj","arr","obj","setBackgroundUrl","value","done","currentState","urls","regular","setFontPairing","console","log","next","setQuote","previousQuote","render","quoteDisplay","quoteControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport Nav from './components/Nav';\nimport Quote from './components/Quote';\nimport QuoteDisplay from './components/QuoteDisplay';\nimport QuoteControls from './components/QuoteControls';\nimport fontPairings from './fonts/fontPairings';\nimport quotes from './quotes/quotes';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [...quotes],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false,\n    }\n\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBackgroundImages(30);\n    this.createFontPairIterator();\n    this.createQuoteIterator();\n  }\n\n  //creates a bg image iterator\n  getBackgroundImages(numberOfImages) {\n    if(numberOfImages > 30) {\n      numberOfImages = 30;\n    }\n    fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: 'Client-ID 637ad8107185907a6e559449be25e4c6fb9429f66f500149003592bbf8bf49ce'\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      this.setState({\n        backgroundImageUrls: resJson,\n      },\n      //runs after setState\n      () => {\n        this.backgroundUrlItObj = this.createIteratorObj(this.state.backgroundImageUrls);\n        this.handleRandomize();\n      })\n    });\n  }\n\n  //create a fontPair Iterator\n  createFontPairIterator() {\n    this.fontPairItObj = this.createIteratorObj(this.state.fontPairings);\n  }\n\n  createQuoteIterator() {\n    this.quoteItObj = this.createIteratorObj(this.state.quotes);\n  }\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n\n  setBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n\n  setFontPairing({value, done}) {\n    if(value) {\n      console.log(value);\n      this.setState((currentState) => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.createFontPairIterator();\n      this.setFontPairing(this.fontPairItObj.next());\n    }\n  }\n\n  setQuote({value, done}) {\n    console.log(value);\n    if(value) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  handleRandomize() {\n    this.setBackgroundUrl(this.backgroundUrlItObj.next());\n    this.setFontPairing(this.fontPairItObj.next());\n    this.setQuote(this.quoteItObj.next());\n  }\n\n  handleUndo() {\n    this.setState((currentState) => {\n      return {\n        backgroundImageUrl: currentState.previousBackgroundImageUrl,\n        fontPair: currentState.previousFontPair\n      }\n    })\n  }\n\n  render() {\n    //create components to pass down\n    const quoteDisplay = (\n      <QuoteDisplay \n      backgroundImageUrl={this.state.backgroundImageUrl} \n      fontPair={this.state.fontPair}\n      quote={this.state.currentQuote}/>\n    )\n    const quoteControls = (\n      <QuoteControls />\n    )\n\n    return (\n        <>\n        <Menu />\n        <Quote quoteDisplay={quoteDisplay} quoteControls={quoteControls}/>\n        <Nav handleRandomize={this.handleRandomize} handleUndo={this.handleUndo}/>\n        </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}