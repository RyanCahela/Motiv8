{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Desktop/CAPSTONE/motiv8/src/components/QuoteCanvas.js\";\nimport React from 'react';\nexport default class QuoteCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    function setupCanvas(canvas) {\n      // Get the device pixel ratio, falling back to 1.\n      var dpr = window.devicePixelRatio || 1; // Get the size of the canvas in CSS pixels.\n\n      var rect = canvas.getBoundingClientRect(); // Give the canvas pixel dimensions of their CSS\n      // size * the device pixel ratio.\n\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      var ctx = canvas.getContext('2d'); // Scale all drawing operations by the dpr, so you\n      // don't have to worry about the difference.\n\n      ctx.scale(dpr, dpr);\n      return ctx;\n    }\n  }\n\n  componentDidMount() {\n    const ctx = this.setupCanvas(this.refs.canvas);\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7'; //create backdrop params\n\n    let backdropSideMargin = 0.1 * this.refs.canvas.width; //0.1 = 10% margin\n\n    let backdropVertMargin = 0.25 * this.refs.canvas.height; //0.25 = 25% of height\n\n    let backdropHeight = this.refs.canvas.height / 2; //2 = half the height of canvas, \n\n    let backdropWidth = this.refs.canvas.width - backdropSideMargin * 2; // 2 is to account for both left and right margin.\n    //draw backdrop\n\n    ctx.fillRect(backdropSideMargin, //x coordinate to start drawing\n    backdropVertMargin, //y coordinate to start drawing\n    backdropWidth, backdropHeight); //draw quote body\n\n    ctx.fillStyle = 'white';\n    ctx.font = '100px serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(\"\".concat(this.props.quote.body), this.refs.canvas.height / 2, backdropVertMargin);\n  }\n\n  setupCanvas(canvas) {\n    //For High Res Displays\n    // Get the device pixel ratio, falling back to 1.\n    var dpr = window.devicePixelRatio || 1; // Get the size of the canvas in CSS pixels.\n\n    var rect = canvas.getBoundingClientRect(); // Give the canvas pixel dimensions of their CSS\n    // size * the device pixel ratio.\n\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    var ctx = canvas.getContext('2d'); // Scale all drawing operations by the dpr, so you\n    // don't have to worry about the difference.\n\n    ctx.scale(dpr, dpr);\n    return ctx;\n  }\n\n  render() {\n    console.log(this.props);\n    const backgroundStyles = {\n      backgroundSize: 'cover',\n      backgroundPosition: 'center center',\n      backgroundImage: \"url(\".concat(this.props.backgroundImageUrl, \")\"),\n      width: '100%'\n    };\n    return React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      style: backgroundStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dev/Desktop/CAPSTONE/motiv8/src/components/QuoteCanvas.js"],"names":["React","QuoteCanvas","Component","constructor","props","setupCanvas","canvas","dpr","window","devicePixelRatio","rect","getBoundingClientRect","width","height","ctx","getContext","scale","componentDidMount","refs","fillStyle","backdropSideMargin","backdropVertMargin","backdropHeight","backdropWidth","fillRect","font","textAlign","fillText","quote","body","render","console","log","backgroundStyles","backgroundSize","backgroundPosition","backgroundImage","backgroundImageUrl"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport default class QuoteCanvas extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    function setupCanvas(canvas) {\n      // Get the device pixel ratio, falling back to 1.\n      var dpr = window.devicePixelRatio || 1;\n      // Get the size of the canvas in CSS pixels.\n      var rect = canvas.getBoundingClientRect();\n      // Give the canvas pixel dimensions of their CSS\n      // size * the device pixel ratio.\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      var ctx = canvas.getContext('2d');\n      // Scale all drawing operations by the dpr, so you\n      // don't have to worry about the difference.\n      ctx.scale(dpr, dpr);\n      return ctx;\n    }\n  }\n\n  componentDidMount() {\n    const ctx = this.setupCanvas(this.refs.canvas);\n    \n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7';\n    \n    //create backdrop params\n    let backdropSideMargin = 0.1 * this.refs.canvas.width; //0.1 = 10% margin\n    let backdropVertMargin = 0.25 * this.refs.canvas.height //0.25 = 25% of height\n    let backdropHeight = this.refs.canvas.height / 2; //2 = half the height of canvas, \n    let backdropWidth = \n      this.refs.canvas.width - backdropSideMargin * 2 // 2 is to account for both left and right margin.\n    //draw backdrop\n    ctx.fillRect(\n      backdropSideMargin, //x coordinate to start drawing\n      backdropVertMargin, //y coordinate to start drawing\n      backdropWidth,\n      backdropHeight);\n    \n    \n\n    //draw quote body\n    ctx.fillStyle = 'white';\n    ctx.font = '100px serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(\n      `${this.props.quote.body}`,\n      this.refs.canvas.height / 2,\n      backdropVertMargin);\n  }\n\n  setupCanvas(canvas) {\n    //For High Res Displays\n    // Get the device pixel ratio, falling back to 1.\n    var dpr = window.devicePixelRatio || 1;\n    // Get the size of the canvas in CSS pixels.\n    var rect = canvas.getBoundingClientRect();\n    // Give the canvas pixel dimensions of their CSS\n    // size * the device pixel ratio.\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    var ctx = canvas.getContext('2d');\n    // Scale all drawing operations by the dpr, so you\n    // don't have to worry about the difference.\n    ctx.scale(dpr, dpr);\n    return ctx;\n  }\n\n  render() {\n    console.log(this.props);\n    const backgroundStyles = {\n      backgroundSize: 'cover',\n      backgroundPosition: 'center center',\n      backgroundImage: `url(${this.props.backgroundImageUrl})`,\n      width: '100%',\n    }\n    return (\n      <canvas ref=\"canvas\" style={backgroundStyles}></canvas>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}