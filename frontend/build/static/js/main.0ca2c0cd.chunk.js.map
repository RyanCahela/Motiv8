{"version":3,"sources":["components/Menu.js","components/Nav.js","components/Quote.js","components/QuoteDisplay.js","components/QuoteControls.js","fonts/fontPairings.js","quotes/quotes.js","Services/IteratorServices.js","App.js","serviceWorker.js","index.js"],"names":["Menu","react_default","a","createElement","Nav","props","onClick","handleUndo","handleRandomize","Quote","quoteControls","quoteDisplay","QuoteDisplay","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","concat","backgroundImageUrl","dynamicBodyFont","fontFamily","fontPair","dynamicAuthorFont","className","style","quote","body","author","React","Component","QuoteControls","htmlFor","onChange","e","handleCheckboxCheck","type","id","fontPairings","quotes","IteratorServices","createIterator","iterable","createIteratorObj","regenerator_default","mark","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","App","_this","state","toConsumableArray","currentQuote","backgroundImageUrls","previousBackgroundImageUrl","previousFontPair","keepBackground","keepFonts","keepQuote","bind","assertThisInitialized","getBackgroundImages","fontPairItObj","quoteItObj","setBackgroundUrl","backgroundUrlItObj","setFontPairing","setQuote","setState","currentState","previousQuote","target","console","log","numberOfImages","_this2","fetch","headers","Authorization","process","then","res","json","resJson","_ref","urls","regular","_ref2","_ref3","QuoteDisplay_QuoteDisplay","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ca2c0cd.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Menu() {\n  return (\n    <header>\n      <button>Menu</button>\n    </header>\n  )\n}\n","import React from 'react'\n\nexport default function Nav(props) {\n  return (\n    <div>\n      <button onClick={() => props.handleUndo()}>Undo</button>\n      <button onClick={() => props.handleRandomize()}>Randomize</button>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Quote(props) {\n\n  return (\n    <div>\n      {props.quoteControls}\n      {props.quoteDisplay}\n    </div>\n  )\n}\n","import React from 'react'\nimport '../css/quote.css';\n\nexport default class QuoteDisplay extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n    const dynamicBackgroundStyles = {\n      backgroundSize: 'cover',\n      backgroundPosition: 'center center',\n      backgroundImage: `url(${this.props.backgroundImageUrl})`,\n    }\n    const dynamicBodyFont = {\n      fontFamily: this.props.fontPair['body']\n    }\n\n    const dynamicAuthorFont = {\n      fontFamily: this.props.fontPair['author']\n    }\n    return (\n      <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n        <div className=\"quote-backdrop\">\n          <div className=\"quote-body\" style={dynamicBodyFont}>{this.props.quote.body}</div>\n          <div className=\"quote-author\" style={dynamicAuthorFont}>{this.props.quote.author}</div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../css/quoteControls.css'\n\nexport default function QuoteControls(props) {\n  return (\n    <div className=\"btn-group\">\n      <label htmlFor=\"keep-quote-checkbox\">Keep Quote</label>\n      <input\n        onChange={(e) => props.handleCheckboxCheck(e)}\n        type=\"checkbox\" \n        id=\"keep-quote-checkbox\" />\n      <label htmlFor=\"keep-fonts-checkbox\">Keep Fonts</label>\n      <input\n        onChange={(e) => props.handleCheckboxCheck(e)}\n        type=\"checkbox\" \n        id=\"keep-fonts-checkbox\" />\n      <label htmlFor=\"keep-background-checkbox\">Keep Background</label>\n      <input\n        onChange={(e) => props.handleCheckboxCheck(e)}\n        type=\"checkbox\" \n        id=\"keep-background-checkbox\" />\n    </div>\n  )\n}\n","const fontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default fontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","const quotes = [\n  {\n    body: `A goal is not always meant to be reached, it often\n    serves simply as something to aim at.`,\n    author: `Bruce Lee`\n  },\n  {\n    body: `Do not fear the winds of adversity. Remember, a kite\n    rises against the wind rather than with it.`,\n    author: `Unknown`\n  },\n  {\n    body: `The privilege of a lifetime is being who you are.`,\n    author: `Joseph Campbell`\n  },\n  {\n    body: `Be an encourager, the world has enough critics already.`,\n    author: `Unknown`\n  },\n  {\n    body: `Success is not final, failure is not fatal: it\n    is the courage to continue that counts.`,\n    author: `Winston Churchill`\n  },\n  {\n    body: `You never know how strong you are until being\n    strong is the only choice you have.`,\n    author: `Unknown`\n  },\n]\n\nexport default quotes;","const IteratorServices = {\n  createIterator(iterable) {\n    return this.createIteratorObj(iterable);\n  },\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n}\n\nexport default IteratorServices;","import React from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport Nav from './components/Nav';\nimport Quote from './components/Quote';\nimport QuoteDisplay from './components/QuoteDisplay';\nimport QuoteControls from './components/QuoteControls';\nimport fontPairings from './fonts/fontPairings';\nimport quotes from './quotes/quotes';\nimport IteratorServices from './Services/IteratorServices';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [...quotes],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false,\n    }\n\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleCheckboxCheck = this.handleCheckboxCheck.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.getBackgroundImages(30);\n    this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n    this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n  }\n  \n  handleRandomize() {\n    if(!this.state.keepBackground) {\n      this.setBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.setFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.setQuote(this.quoteItObj.next());\n    }\n  }\n  \n  handleUndo() {\n    this.setState((currentState) => {\n      return {\n        backgroundImageUrl: currentState.previousBackgroundImageUrl,\n        fontPair: currentState.previousFontPair,\n        currentQuote: currentState.previousQuote\n      }\n    })\n  }\n\n  handleCheckboxCheck(e) {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n        console.log('Something went wrong with the switch');\n    }\n  }\n  \n  \n  //HELPER FUNCTIONS\n  getBackgroundImages(numberOfImages) {\n    if(numberOfImages > 30) {\n      numberOfImages = 30;\n    }\n    fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      this.setState({\n        backgroundImageUrls: resJson,\n      },\n      //runs after setState\n      () => {\n        this.backgroundUrlItObj = IteratorServices.createIterator(this.state.backgroundImageUrls)\n        this.handleRandomize();\n      })\n    });\n  }\n  \n  setBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  setFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n      this.setFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  setQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n      this.setQuote(this.quoteItObj.next());\n    }\n  }\n\n  render() {\n    //create components to pass down\n    const quoteDisplay = (\n      <QuoteDisplay \n      backgroundImageUrl={this.state.backgroundImageUrl} \n      fontPair={this.state.fontPair}\n      quote={this.state.currentQuote}/>\n    )\n    const quoteControls = (\n      <QuoteControls \n        handleCheckboxCheck={this.handleCheckboxCheck}/>\n    )\n        \n    return (\n      <>\n    <Menu />\n    <Quote quoteDisplay={quoteDisplay} quoteControls={quoteControls}/>\n    <Nav handleRandomize={this.handleRandomize} handleUndo={this.handleUndo}/>\n    </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log(process.env);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}